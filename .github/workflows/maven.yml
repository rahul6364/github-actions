name: Java CI with Maven
on:
  push:
    branches: [ "main" ]

jobs:
  compile:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
  Security-check:

    runs-on: self-hosted
    needs: compile
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release 
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list 
        sudo apt-get update -y
        sudo apt-get install trivy -y

    - name: trivy FS scan
      run: trivy fs --format table -o fs-report.json .
    - name:  install git
      run: sudo apt-get update -y && sudo apt-get install -y git
    - name: gitleaks installation
      run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version
    - name: gitleaks code scan 
      run: gitleaks detect -s . -r gitleaks-report.json -f json
  test:

    runs-on: self-hosted
    needs: Security-check
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: test cases
      run: mvn test
  build_project_and_sonar_scanner:

    runs-on: self-hosted
    needs: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: build project
      run: mvn package
    - name: upload jar artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
      
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v6.0.0 # Ex: v4.1.0 or sha1, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      continue-on-error: true
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}


  docker_build_and_push:

    runs-on: self-hosted
    needs: build_project_and_sonar_scanner

    steps:
    - uses: actions/checkout@v4
  
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: rahul6364/bank-app:latest
  deploy_to_k8s:
    runs-on: self-hosted
    needs: docker_build_and_push
    steps:
    - uses: actions/checkout@v4
    - name: setup  GCP credentials
      run: |
        echo '%s' "${{ secrets.GCP_SA_KEY }}" > sa.json
        gcloud auth activate-service-account --key-file sa.json
        gcloud config set project ${{vars.GCP_PROJECT_ID}}
        gcloud config set compute/zone us-east1-b

    - name: get GKE credentials
      run: gcloud container clusters get-credentials bankapp-zonal --zone us-central1-a 
    - name: Deploy Kubernetes manifests
      run: |
        kubectl create namespace java
        kubectl apply -f k8s.yml
    
      